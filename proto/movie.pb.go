// Code generated by protoc-gen-go. DO NOT EDIT.
// source: movie.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Movie struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	OriginalTitle        string   `protobuf:"bytes,3,opt,name=original_title,json=originalTitle,proto3" json:"original_title,omitempty"`
	LocalTitle           string   `protobuf:"bytes,4,opt,name=local_title,json=localTitle,proto3" json:"local_title,omitempty"`
	OriginalLanguage     string   `protobuf:"bytes,5,opt,name=original_language,json=originalLanguage,proto3" json:"original_language,omitempty"`
	Languages            []byte   `protobuf:"bytes,6,opt,name=languages,proto3" json:"languages,omitempty"`
	Overview             string   `protobuf:"bytes,7,opt,name=overview,proto3" json:"overview,omitempty"`
	Tagline              string   `protobuf:"bytes,8,opt,name=tagline,proto3" json:"tagline,omitempty"`
	Genres               []byte   `protobuf:"bytes,9,opt,name=genres,proto3" json:"genres,omitempty"`
	Homepage             string   `protobuf:"bytes,10,opt,name=homepage,proto3" json:"homepage,omitempty"`
	Runtime              uint64   `protobuf:"varint,11,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Status               uint64   `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	Adult                bool     `protobuf:"varint,13,opt,name=adult,proto3" json:"adult,omitempty"`
	ImdbId               string   `protobuf:"bytes,14,opt,name=imdb_id,json=imdbId,proto3" json:"imdb_id,omitempty"`
	ReleaseDate          string   `protobuf:"bytes,15,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	ProductionCompanies  []byte   `protobuf:"bytes,16,opt,name=production_companies,json=productionCompanies,proto3" json:"production_companies,omitempty"`
	ProductionCountries  []byte   `protobuf:"bytes,17,opt,name=production_countries,json=productionCountries,proto3" json:"production_countries,omitempty"`
	VoteAverage          float64  `protobuf:"fixed64,18,opt,name=vote_average,json=voteAverage,proto3" json:"vote_average,omitempty"`
	VoteCount            uint64   `protobuf:"varint,19,opt,name=vote_count,json=voteCount,proto3" json:"vote_count,omitempty"`
	Popularity           float64  `protobuf:"fixed64,20,opt,name=popularity,proto3" json:"popularity,omitempty"`
	Budget               uint64   `protobuf:"varint,21,opt,name=budget,proto3" json:"budget,omitempty"`
	Revenue              uint64   `protobuf:"varint,22,opt,name=revenue,proto3" json:"revenue,omitempty"`
	Backdrop             string   `protobuf:"bytes,23,opt,name=backdrop,proto3" json:"backdrop,omitempty"`
	Poster               string   `protobuf:"bytes,24,opt,name=poster,proto3" json:"poster,omitempty"`
	CreatedAt            int64    `protobuf:"varint,25,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int64    `protobuf:"varint,26,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UpdatedFields        []string `protobuf:"bytes,27,rep,name=updated_fields,json=updatedFields,proto3" json:"updated_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Movie) Reset()         { *m = Movie{} }
func (m *Movie) String() string { return proto.CompactTextString(m) }
func (*Movie) ProtoMessage()    {}
func (*Movie) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{0}
}

func (m *Movie) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Movie.Unmarshal(m, b)
}
func (m *Movie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Movie.Marshal(b, m, deterministic)
}
func (m *Movie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Movie.Merge(m, src)
}
func (m *Movie) XXX_Size() int {
	return xxx_messageInfo_Movie.Size(m)
}
func (m *Movie) XXX_DiscardUnknown() {
	xxx_messageInfo_Movie.DiscardUnknown(m)
}

var xxx_messageInfo_Movie proto.InternalMessageInfo

func (m *Movie) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Movie) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Movie) GetOriginalTitle() string {
	if m != nil {
		return m.OriginalTitle
	}
	return ""
}

func (m *Movie) GetLocalTitle() string {
	if m != nil {
		return m.LocalTitle
	}
	return ""
}

func (m *Movie) GetOriginalLanguage() string {
	if m != nil {
		return m.OriginalLanguage
	}
	return ""
}

func (m *Movie) GetLanguages() []byte {
	if m != nil {
		return m.Languages
	}
	return nil
}

func (m *Movie) GetOverview() string {
	if m != nil {
		return m.Overview
	}
	return ""
}

func (m *Movie) GetTagline() string {
	if m != nil {
		return m.Tagline
	}
	return ""
}

func (m *Movie) GetGenres() []byte {
	if m != nil {
		return m.Genres
	}
	return nil
}

func (m *Movie) GetHomepage() string {
	if m != nil {
		return m.Homepage
	}
	return ""
}

func (m *Movie) GetRuntime() uint64 {
	if m != nil {
		return m.Runtime
	}
	return 0
}

func (m *Movie) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Movie) GetAdult() bool {
	if m != nil {
		return m.Adult
	}
	return false
}

func (m *Movie) GetImdbId() string {
	if m != nil {
		return m.ImdbId
	}
	return ""
}

func (m *Movie) GetReleaseDate() string {
	if m != nil {
		return m.ReleaseDate
	}
	return ""
}

func (m *Movie) GetProductionCompanies() []byte {
	if m != nil {
		return m.ProductionCompanies
	}
	return nil
}

func (m *Movie) GetProductionCountries() []byte {
	if m != nil {
		return m.ProductionCountries
	}
	return nil
}

func (m *Movie) GetVoteAverage() float64 {
	if m != nil {
		return m.VoteAverage
	}
	return 0
}

func (m *Movie) GetVoteCount() uint64 {
	if m != nil {
		return m.VoteCount
	}
	return 0
}

func (m *Movie) GetPopularity() float64 {
	if m != nil {
		return m.Popularity
	}
	return 0
}

func (m *Movie) GetBudget() uint64 {
	if m != nil {
		return m.Budget
	}
	return 0
}

func (m *Movie) GetRevenue() uint64 {
	if m != nil {
		return m.Revenue
	}
	return 0
}

func (m *Movie) GetBackdrop() string {
	if m != nil {
		return m.Backdrop
	}
	return ""
}

func (m *Movie) GetPoster() string {
	if m != nil {
		return m.Poster
	}
	return ""
}

func (m *Movie) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Movie) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Movie) GetUpdatedFields() []string {
	if m != nil {
		return m.UpdatedFields
	}
	return nil
}

func init() {
	proto.RegisterType((*Movie)(nil), "proto.Movie")
}

func init() { proto.RegisterFile("movie.proto", fileDescriptor_fde087a4194eda75) }

var fileDescriptor_fde087a4194eda75 = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x7f, 0x6f, 0x12, 0x4b,
	0x14, 0x7d, 0xdb, 0x16, 0x28, 0x17, 0x4a, 0xdb, 0x29, 0x85, 0x79, 0xbc, 0xa7, 0x62, 0x13, 0x13,
	0x12, 0x93, 0x26, 0x6a, 0xf4, 0x0f, 0x8d, 0x26, 0xb4, 0x6b, 0x0d, 0xa6, 0x4d, 0x13, 0xaa, 0x7f,
	0x93, 0x81, 0xb9, 0xc5, 0x89, 0xcb, 0xcc, 0x66, 0x76, 0x96, 0x86, 0x8f, 0xe7, 0x97, 0xf0, 0xf3,
	0x98, 0x99, 0xd9, 0x85, 0xfe, 0x30, 0xc4, 0xf5, 0x2f, 0x72, 0xce, 0xb9, 0xe7, 0xec, 0xd9, 0xbb,
	0x3b, 0x0b, 0xd4, 0x66, 0x6a, 0x2e, 0xf0, 0x38, 0xd6, 0xca, 0x28, 0x52, 0x72, 0x3f, 0x9d, 0x06,
	0x67, 0x86, 0x8d, 0x59, 0x92, 0xd1, 0x47, 0x3f, 0xca, 0x50, 0xba, 0xb0, 0x63, 0xa4, 0x01, 0x1b,
	0x82, 0xd3, 0xa0, 0x1b, 0xf4, 0xb6, 0x86, 0x1b, 0x82, 0x93, 0x26, 0x94, 0x8c, 0x30, 0x11, 0xd2,
	0x8d, 0x6e, 0xd0, 0xab, 0x0e, 0x3d, 0x20, 0xcf, 0xa0, 0xa1, 0xb4, 0x98, 0x0a, 0xc9, 0xa2, 0x91,
	0x97, 0x37, 0x9d, 0xbc, 0x93, 0xb3, 0x5f, 0xdc, 0xd8, 0x13, 0xa8, 0x45, 0x6a, 0xb2, 0x9c, 0xd9,
	0x72, 0x33, 0xe0, 0x28, 0x3f, 0xf0, 0x1c, 0xf6, 0x97, 0x39, 0x11, 0x93, 0xd3, 0x94, 0x4d, 0x91,
	0x96, 0xdc, 0xd8, 0x5e, 0x2e, 0x9c, 0x67, 0x3c, 0xf9, 0x1f, 0xaa, 0xf9, 0x4c, 0x42, 0xcb, 0xdd,
	0xa0, 0x57, 0x1f, 0xae, 0x08, 0xd2, 0x81, 0x6d, 0x35, 0x47, 0x3d, 0x17, 0x78, 0x43, 0x2b, 0x2e,
	0x61, 0x89, 0x09, 0x85, 0x8a, 0x61, 0xd3, 0x48, 0x48, 0xa4, 0xdb, 0x4e, 0xca, 0x21, 0x69, 0x41,
	0x79, 0x8a, 0x52, 0x63, 0x42, 0xab, 0x2e, 0x30, 0x43, 0x36, 0xed, 0x9b, 0x9a, 0x61, 0x6c, 0xfb,
	0x80, 0x4f, 0xcb, 0xb1, 0x4d, 0xd3, 0xa9, 0x34, 0x62, 0x86, 0xb4, 0xe6, 0xf6, 0x94, 0x43, 0x9b,
	0x96, 0x18, 0x66, 0xd2, 0x84, 0xd6, 0x9d, 0x90, 0x21, 0xbb, 0x44, 0xc6, 0xd3, 0xc8, 0xd0, 0x9d,
	0x6e, 0xd0, 0xdb, 0x1e, 0x7a, 0x40, 0xda, 0x50, 0x11, 0x33, 0x3e, 0x1e, 0x09, 0x4e, 0x1b, 0xee,
	0x12, 0x65, 0x0b, 0x07, 0x9c, 0x3c, 0x85, 0xba, 0xc6, 0x08, 0x59, 0x82, 0x23, 0xce, 0x0c, 0xd2,
	0x5d, 0xa7, 0xd6, 0x32, 0x2e, 0x64, 0x06, 0xc9, 0x0b, 0x68, 0xc6, 0x5a, 0xf1, 0x74, 0x62, 0x84,
	0x92, 0xa3, 0x89, 0x9a, 0xc5, 0x4c, 0x0a, 0x4c, 0xe8, 0x9e, 0xbb, 0x8b, 0x83, 0x95, 0x76, 0x9a,
	0x4b, 0x0f, 0x2c, 0xa9, 0x34, 0xda, 0x5a, 0xf6, 0x1f, 0x5a, 0x32, 0xc9, 0x16, 0x99, 0x2b, 0x83,
	0x23, 0x36, 0x47, 0x6d, 0x37, 0x41, 0xba, 0x41, 0x2f, 0x18, 0xd6, 0x2c, 0xd7, 0xf7, 0x14, 0x79,
	0x04, 0xe0, 0x46, 0x5c, 0x1e, 0x3d, 0x70, 0xb7, 0x5d, 0xb5, 0x8c, 0x4b, 0x21, 0x8f, 0x01, 0x62,
	0x15, 0xa7, 0x11, 0xd3, 0xc2, 0x2c, 0x68, 0xd3, 0xf9, 0x6f, 0x31, 0x76, 0x63, 0xe3, 0x94, 0x4f,
	0xd1, 0xd0, 0x43, 0xbf, 0x31, 0x8f, 0xdc, 0x8e, 0x71, 0x8e, 0x32, 0x45, 0xda, 0xca, 0x76, 0xec,
	0xa1, 0x7d, 0x32, 0x63, 0x36, 0xf9, 0xce, 0xb5, 0x8a, 0x69, 0xdb, 0x3f, 0x99, 0x1c, 0xdb, 0xb4,
	0x58, 0x25, 0x06, 0x35, 0xa5, 0x7e, 0xa1, 0x1e, 0xd9, 0x92, 0x13, 0x8d, 0xcc, 0x20, 0x1f, 0x31,
	0x43, 0xff, 0xed, 0x06, 0xbd, 0xcd, 0x61, 0x35, 0x63, 0xfa, 0xc6, 0xca, 0x69, 0xcc, 0x73, 0xb9,
	0xe3, 0xe5, 0x8c, 0xe9, 0x1b, 0xfb, 0xb2, 0xe7, 0xf2, 0xb5, 0xc0, 0x88, 0x27, 0xf4, 0xbf, 0xee,
	0xa6, 0x7d, 0xd9, 0x33, 0xf6, 0xcc, 0x91, 0x2f, 0x7f, 0x56, 0xa0, 0xee, 0xce, 0xd0, 0x95, 0x7d,
	0xeb, 0x26, 0xf6, 0x19, 0x95, 0x4f, 0xdd, 0x35, 0x48, 0xdd, 0x1f, 0xb3, 0x63, 0x27, 0x77, 0xda,
	0x19, 0x0a, 0xb3, 0x33, 0x38, 0xc4, 0x24, 0x56, 0x32, 0xc1, 0xa3, 0x7f, 0xac, 0xe5, 0xab, 0x0b,
	0xfd, 0x73, 0xcb, 0x6b, 0x80, 0x2b, 0x75, 0x6d, 0x42, 0x8c, 0xb0, 0x88, 0xed, 0x0d, 0xd4, 0xce,
	0x94, 0x9e, 0x60, 0x51, 0xdf, 0x5b, 0xa8, 0x9c, 0x09, 0xc9, 0xfb, 0x51, 0x44, 0x9a, 0xf7, 0xa6,
	0x3e, 0xce, 0x62, 0xb3, 0x58, 0xe7, 0xfd, 0x00, 0x35, 0xeb, 0xbd, 0x94, 0xd1, 0x62, 0x10, 0x26,
	0xc5, 0xfd, 0x7d, 0x68, 0x58, 0x7f, 0xa8, 0x6e, 0x64, 0xa4, 0x18, 0x47, 0x5e, 0x3c, 0xe2, 0x5d,
	0x5e, 0x01, 0x4f, 0x16, 0x83, 0x90, 0xec, 0xdf, 0x9b, 0x1c, 0x84, 0xeb, 0xcc, 0xef, 0xa1, 0x6e,
	0xcd, 0x17, 0x4c, 0x2e, 0x9c, 0x9b, 0x3c, 0x70, 0x27, 0xeb, 0xec, 0x27, 0xbe, 0xbe, 0xbb, 0xb6,
	0xff, 0xfc, 0x1d, 0xde, 0x1b, 0xbe, 0x32, 0x5a, 0xc8, 0xe9, 0xba, 0x8c, 0x10, 0x76, 0x57, 0x15,
	0x7c, 0x48, 0xeb, 0xb7, 0x21, 0x6b, 0x9b, 0x7c, 0x86, 0xd6, 0xb2, 0xc9, 0xe5, 0x9d, 0x2f, 0x76,
	0xf1, 0x46, 0xe7, 0xd0, 0x5e, 0x35, 0xba, 0x1b, 0xf6, 0x17, 0xcd, 0x3e, 0xc1, 0xc1, 0xb2, 0xd9,
	0xf9, 0xea, 0x7f, 0xa2, 0x78, 0xad, 0x01, 0x34, 0x57, 0xb5, 0x6e, 0x25, 0x15, 0xef, 0x34, 0x2e,
	0x3b, 0xe5, 0xd5, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xdc, 0x6a, 0x50, 0x49, 0x07, 0x00,
	0x00,
}
