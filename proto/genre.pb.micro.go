// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: genre.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for GenreService service

type GenreService interface {
	Create(ctx context.Context, in *Genre, opts ...client.CallOption) (*DatabaseResponse, error)
	Update(ctx context.Context, in *Genre, opts ...client.CallOption) (*DatabaseResponse, error)
	SoftDelete(ctx context.Context, in *Genre, opts ...client.CallOption) (*DatabaseResponse, error)
	ForceDelete(ctx context.Context, in *Genre, opts ...client.CallOption) (*DatabaseResponse, error)
	FindAll(ctx context.Context, in *DatabaseEmpty, opts ...client.CallOption) (*DatabaseResponse, error)
	FindOneByID(ctx context.Context, in *DatabaseID, opts ...client.CallOption) (*DatabaseResponse, error)
	FindManyByID(ctx context.Context, in *DatabaseIDs, opts ...client.CallOption) (*DatabaseResponse, error)
	FindOneByName(ctx context.Context, in *DatabaseString, opts ...client.CallOption) (*DatabaseResponse, error)
	FindManyByName(ctx context.Context, in *DatabaseStrings, opts ...client.CallOption) (*DatabaseResponse, error)
}

type genreService struct {
	c    client.Client
	name string
}

func NewGenreService(name string, c client.Client) GenreService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &genreService{
		c:    c,
		name: name,
	}
}

func (c *genreService) Create(ctx context.Context, in *Genre, opts ...client.CallOption) (*DatabaseResponse, error) {
	req := c.c.NewRequest(c.name, "GenreService.Create", in)
	out := new(DatabaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreService) Update(ctx context.Context, in *Genre, opts ...client.CallOption) (*DatabaseResponse, error) {
	req := c.c.NewRequest(c.name, "GenreService.Update", in)
	out := new(DatabaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreService) SoftDelete(ctx context.Context, in *Genre, opts ...client.CallOption) (*DatabaseResponse, error) {
	req := c.c.NewRequest(c.name, "GenreService.SoftDelete", in)
	out := new(DatabaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreService) ForceDelete(ctx context.Context, in *Genre, opts ...client.CallOption) (*DatabaseResponse, error) {
	req := c.c.NewRequest(c.name, "GenreService.ForceDelete", in)
	out := new(DatabaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreService) FindAll(ctx context.Context, in *DatabaseEmpty, opts ...client.CallOption) (*DatabaseResponse, error) {
	req := c.c.NewRequest(c.name, "GenreService.FindAll", in)
	out := new(DatabaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreService) FindOneByID(ctx context.Context, in *DatabaseID, opts ...client.CallOption) (*DatabaseResponse, error) {
	req := c.c.NewRequest(c.name, "GenreService.FindOneByID", in)
	out := new(DatabaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreService) FindManyByID(ctx context.Context, in *DatabaseIDs, opts ...client.CallOption) (*DatabaseResponse, error) {
	req := c.c.NewRequest(c.name, "GenreService.FindManyByID", in)
	out := new(DatabaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreService) FindOneByName(ctx context.Context, in *DatabaseString, opts ...client.CallOption) (*DatabaseResponse, error) {
	req := c.c.NewRequest(c.name, "GenreService.FindOneByName", in)
	out := new(DatabaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genreService) FindManyByName(ctx context.Context, in *DatabaseStrings, opts ...client.CallOption) (*DatabaseResponse, error) {
	req := c.c.NewRequest(c.name, "GenreService.FindManyByName", in)
	out := new(DatabaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GenreService service

type GenreServiceHandler interface {
	Create(context.Context, *Genre, *DatabaseResponse) error
	Update(context.Context, *Genre, *DatabaseResponse) error
	SoftDelete(context.Context, *Genre, *DatabaseResponse) error
	ForceDelete(context.Context, *Genre, *DatabaseResponse) error
	FindAll(context.Context, *DatabaseEmpty, *DatabaseResponse) error
	FindOneByID(context.Context, *DatabaseID, *DatabaseResponse) error
	FindManyByID(context.Context, *DatabaseIDs, *DatabaseResponse) error
	FindOneByName(context.Context, *DatabaseString, *DatabaseResponse) error
	FindManyByName(context.Context, *DatabaseStrings, *DatabaseResponse) error
}

func RegisterGenreServiceHandler(s server.Server, hdlr GenreServiceHandler, opts ...server.HandlerOption) error {
	type genreService interface {
		Create(ctx context.Context, in *Genre, out *DatabaseResponse) error
		Update(ctx context.Context, in *Genre, out *DatabaseResponse) error
		SoftDelete(ctx context.Context, in *Genre, out *DatabaseResponse) error
		ForceDelete(ctx context.Context, in *Genre, out *DatabaseResponse) error
		FindAll(ctx context.Context, in *DatabaseEmpty, out *DatabaseResponse) error
		FindOneByID(ctx context.Context, in *DatabaseID, out *DatabaseResponse) error
		FindManyByID(ctx context.Context, in *DatabaseIDs, out *DatabaseResponse) error
		FindOneByName(ctx context.Context, in *DatabaseString, out *DatabaseResponse) error
		FindManyByName(ctx context.Context, in *DatabaseStrings, out *DatabaseResponse) error
	}
	type GenreService struct {
		genreService
	}
	h := &genreServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GenreService{h}, opts...))
}

type genreServiceHandler struct {
	GenreServiceHandler
}

func (h *genreServiceHandler) Create(ctx context.Context, in *Genre, out *DatabaseResponse) error {
	return h.GenreServiceHandler.Create(ctx, in, out)
}

func (h *genreServiceHandler) Update(ctx context.Context, in *Genre, out *DatabaseResponse) error {
	return h.GenreServiceHandler.Update(ctx, in, out)
}

func (h *genreServiceHandler) SoftDelete(ctx context.Context, in *Genre, out *DatabaseResponse) error {
	return h.GenreServiceHandler.SoftDelete(ctx, in, out)
}

func (h *genreServiceHandler) ForceDelete(ctx context.Context, in *Genre, out *DatabaseResponse) error {
	return h.GenreServiceHandler.ForceDelete(ctx, in, out)
}

func (h *genreServiceHandler) FindAll(ctx context.Context, in *DatabaseEmpty, out *DatabaseResponse) error {
	return h.GenreServiceHandler.FindAll(ctx, in, out)
}

func (h *genreServiceHandler) FindOneByID(ctx context.Context, in *DatabaseID, out *DatabaseResponse) error {
	return h.GenreServiceHandler.FindOneByID(ctx, in, out)
}

func (h *genreServiceHandler) FindManyByID(ctx context.Context, in *DatabaseIDs, out *DatabaseResponse) error {
	return h.GenreServiceHandler.FindManyByID(ctx, in, out)
}

func (h *genreServiceHandler) FindOneByName(ctx context.Context, in *DatabaseString, out *DatabaseResponse) error {
	return h.GenreServiceHandler.FindOneByName(ctx, in, out)
}

func (h *genreServiceHandler) FindManyByName(ctx context.Context, in *DatabaseStrings, out *DatabaseResponse) error {
	return h.GenreServiceHandler.FindManyByName(ctx, in, out)
}
